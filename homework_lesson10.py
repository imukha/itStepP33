while True:
    print('\n–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è:')
    print('1 - –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ1')
    print('2 - –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ2')
    print('3 - –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ3')
    print('4 - –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ4')
    print('5 - –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ5')
    print('6 - –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ6')
    choice = input('–í–∞—à –≤–∏–±—ñ—Ä: ')

    if choice == '1':
        # –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ1

        def multiply_list(lst):
            result = 1
            for num in lst:
                result *= num
            return result


        # –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
        numbers = input("–í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∫–æ–º—É: ").split(",")
        numbers = [int(num) for num in numbers]
        product = multiply_list(numbers)
        print(f"–î–æ–±—É—Ç–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å–ø–∏—Å–∫—É: {product}")

    elif choice == '2':
        # –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ2
        def find_min(lst):
            min_num = lst[0]
            for num in lst:
                if num < min_num:
                    min_num = num
            return min_num


        #  –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
        numbers = input("–í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∫–æ–º—É: ").split(",")
        numbers = [int(num) for num in numbers]
        min_num = find_min(numbers)
        print(f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫—É: {min_num}")

    elif choice == '3':
        # –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ3
        def is_prime(num):
            if num < 2:
                return False
            for i in range(2, int(num ** 0.5) + 1):
                if num % i == 0:
                    return False
            return True


        def count_primes(lst):
            count = 0
            for num in lst:
                if is_prime(num):
                    count += 1
            return count


        # –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
        numbers = input("–í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∫–æ–º—É: ").split(",")
        numbers = [int(num) for num in numbers]
        prime_count = count_primes(numbers)
        print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Å—Ç–∏—Ö —á–∏—Å–µ–ª —É —Å–ø–∏—Å–∫—É: {prime_count}")

    elif choice == '4':
        # –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ4

        def remove_value(lst, value):
            count = 0
            for i in lst:
                if i == value:
                    lst.remove(i)
                    count += 1
            return count


        # –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
        numbers = input("–í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∫–æ–º—É: ").split(",")
        numbers = [int(num) for num in numbers]
        value = int(input("–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏: "))
        removed_count = remove_value(numbers, value)
        print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {removed_count}")
        print(f"–ó–º—ñ–Ω–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫: {numbers}")

    elif choice == '5':
        # –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ5

        def merge_lists(lst1, lst2):

            merged_list = lst1 + lst2
            return merged_list


        # –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
        list1 = input("–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à–∏–π —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∫–æ–º—É: ").split(",")
        list1 = [int(num) for num in list1]
        list2 = input("–í–≤–µ–¥—ñ—Ç—å –¥—Ä—É–≥–∏–π —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∫–æ–º—É: ").split(",")
        list2 = [int(num) for num in list2]
        merged_list = merge_lists(list1, list2)
        print(f"–û–±'—î–¥–Ω–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫: {merged_list}")

    elif choice == '6':
        # –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ6

        def calculate_powers(lst, power):
            powered_list = [num ** power for num in lst]
            return powered_list


        #  –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
        lst = input("–í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∫–æ–º—É: ").split(",")
        lst = [int(num) for num in lst]
        power = int(input("–í–≤–µ–¥—ñ—Ç—å —Å—Ç–µ–ø—ñ–Ω—å, –¥–æ —è–∫–æ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–Ω—è—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫—É: "))
        powered_lst = calculate_powers(lst, power)
        print(f"–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏, –ø—ñ–¥–Ω–µ—Å–µ–Ω–∏–º–∏ –¥–æ —Å—Ç–µ–ø–µ–Ω—è {power}: {powered_lst}")
    else:
        print('–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–≤—ñ–¥, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!üëáüèªüëáüèªüëáüèª')
