myStr = 'hello'
a = "hello"
print(id(myStr))
print(type(myStr))
print(myStr)
zminna_str = """Hello
                ww
        w"""
print(zminna_str)

a = 'Python'
print(a[0])
print(a[1])
print(a[-1])
print(a[len(a) - 1])

a = 'Hello '
b = 'World'
print(a + b)
print(a * 5)

a = "python (найчастіше вживане прочитання — «Па́йтон», python запозичено назву[7] з британського шоу Монті Пайтон) — інтерпретована об'єктно-орієнтована мова програмування високого рівня зі строгою динамічною типізацією.[8] Розроблена в 1990 році Гвідо ван Россумом. Структури даних високого рівня разом із динамічною семантикою та динамічним зв'язуванням роблять її привабливою для швидкої розробки програм, а також як засіб поєднування наявних компонентів. Python підтримує модулі та пакети модулів, що сприяє модульності та повторному використанню коду. Інтерпретатор Python та стандартні бібліотеки доступні як у скомпільованій, так і у вихідній формі на всіх основних платформах. В мові програмування Python підтримується кілька парадигм програмування, зокрема: об'єктно-орієнтована, процедурна, функціональна та аспектно-орієнтована."
print(a.capitalize())  # перший символ у великий інші маленьки
print(a.lower())  # в нижній регістр
print(a.upper())  # в верхній регістр
print(a.title())  # перші літери слів верх
print(a.swapcase())  # протилежний регістр

print(a.count('python'))
print(a.count('python', 20, 60))  # з 20 по 60 символ

print(a.find('вживане'))  # індекс першого входження
print(a.find('вживане', 20, 65))
try:
    print(a.index('вживане, 30'))
except ValueError:
    print('error')
finally:
    print('дякуюмо що скор нашим пошуком')

print(a.rfind('вживане'))  # індекс останьього входження

sr = "python (найчастіше вживане прочитання — «Па́йтон», python запозичено назву[7] з британського шоу Монті Пайтон) — інтерпретована об'єктно-орієнтована мова програмування високого рівня зі строгою динамічною типізацією.[8] Розроблена в 1990 році Гвідо ван Россумом. Структури даних високого рівня разом із динамічною семантикою та динамічним зв'язуванням роблять її привабливою для швидкої розробки програм, а також як засіб поєднування наявних компонентів. Python підтримує модулі та пакети модулів, що сприяє модульності та повторному використанню коду. Інтерпретатор Python та стандартні бібліотеки доступні як у скомпільованій, так і у вихідній формі на всіх основних платформах. В мові програмування Python підтримується кілька парадигм програмування, зокрема: об'єктно-орієнтована, процедурна, функціональна та аспектно-орієнтована."
a = input('введіть слово: ')
if sr.find(a):
    print('true')

# 2

sr = "python (найчастіше вживане прочитання — «Па́йтон», python запозичено назву[7] з британського шоу Монті Пайтон) — інтерпретована об'єктно-орієнтована мова програмування високого рівня зі строгою динамічною типізацією.[8] Розроблена в 1990 році Гвідо ван Россумом. Структури даних високого рівня разом із динамічною семантикою та динамічним зв'язуванням роблять її привабливою для швидкої розробки програм, а також як засіб поєднування наявних компонентів. Python підтримує модулі та пакети модулів, що сприяє модульності та повторному використанню коду. Інтерпретатор Python та стандартні бібліотеки доступні як у скомпільованій, так і у вихідній формі на всіх основних платформах. В мові програмування Python підтримується кілька парадигм програмування, зокрема: об'єктно-орієнтована, процедурна, функціональна та аспектно-орієнтована."
print(sr.startswith('p'))  # Чи починається рядок з заданого фрагменту
print(sr.startswith('P'))
print(sr.startswith('python'))
print(sr.startswith('p', 90))

print(sr.endswith('.'))  # Чи щакінчується рядок на заданий фрагмент
print(sr.endswith('n', 0, 6))

stroka = 'Python2023'
print(stroka.isalnum())  # Перевіряє чи рядок склад лише з літер і чисел\
print(stroka.isalpha())  # літер
print(stroka.isdigit())  # цифр

a = input('Введіть перше число: ')
b = input('Введіть друге число: ')
if a.isdigit() == True and b.isdigit() == True:
    с = int(a) + int(b)
    print('tr')

stroka = 'python'
print(stroka.islower())  # перевіряє чи всі елементи рядка в нижньому регістрі
print(stroka.isupper())
print(stroka.istitle())

strka_1 = '\n\t\n   \n'
print(strka_1.isspace())  # лише пробілові символи

sr = 'Pyt\thon'
print(sr.center(30))
print(sr.center(30, '*'))
print(sr.expandtabs(tabsize=8))  # задаємо скільки символів табуляції
print(sr.ljust(30, '@'))
print(sr.rjust(30, '@'))

sr = 'Python-cool!'
print(sr[1:3] + sr[7:9])
print(sr[-5:-2])
print(sr[:6])
print(sr[-5:])
sr_1 = '0123456789'
print(sr_1[2:8:2])
print(sr_1[::-1])
print(sr_1[5::2])
print(sr_1[:len(sr_1):3])

a = r'\n-newline'
print(a)
b = r'\t\tAdd+\n'
print(b)
c = r'C:UsersUser\AppData\Local\Programs\Python\Python311\python.exe'
print(c)
d = r'abc\\'
print(d)

day = 11
monyt = 4
year = 2023
name = 'Ivan'
print('Today {}.{}.{}'.format(day, monyt, year))
print(f'Today {day}.{monyt}.{year}'.format(monyt=monyt, day=11, year=2023))

print(f'hello {name}')
print(f'hello {name}*2')
print(f'hello {name:-^30}. Now is {year}')
print(f'hello {name:->30}. Now is {year}')
print(f'hello {name:-<30}. Now is {year}')
